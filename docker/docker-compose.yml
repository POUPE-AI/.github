services:
  # Keycloak DB
  keycloak-db:
    image: postgres:latest
    container_name: keycloak-db
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KEYCLOAK_DB_USER}", "-d", "${KEYCLOAK_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - poupe-ai-network

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: >
      start-dev 
      --spi-theme-cache-themes=false 
      --spi-theme-cache-templates=false
      --import-realm
      --log-console-output=json
      --log-level=org.keycloak.events:DEBUG
      --spi-events-listener-jboss-logging-enabled=true
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_HTTP_ENABLED: 'true'
      KC_PROXY: 'edge'
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realms/import/poupe-ai-realm.json:/opt/keycloak/data/import/poupe-ai-realm.json
      - ./keycloak/themes:/opt/keycloak/themes
    depends_on:
      - keycloak-db
    networks:
      - poupe-ai-network

  # Kong Gateway
  kong:
    image: kong:latest
    container_name: kong-gateway
    environment:
      KONG_DATABASE: off
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yaml
      KONG_PLUGINS: bundled,jwt-header-injector
    volumes:
      - ./kong/kong.yaml:/opt/kong/kong.yaml
      - ./kong/plugins/jwt-header-injector:/usr/local/share/lua/5.1/kong/plugins/jwt-header-injector
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8443:8443"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    networks:
      - poupe-ai-network

  # Finances Service DB
  finances-db:
    image: postgres:latest
    container_name: finances-db
    environment:
      POSTGRES_DB: ${FINANCE_DB}	
      POSTGRES_USER: ${FINANCE_DB_USER}
      POSTGRES_PASSWORD: ${FINANCE_DB_PASSWORD}
    volumes:
      - finances_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${FINANCE_DB_USER}", "-d", "${FINANCE_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - poupe-ai-network

  # Finances Service
  finances-service:
    build:
      context: ../finance_service/poupeai-finance-service
      dockerfile: compose/local/django/Dockerfile
    container_name: finances-service
    environment:
      POSTGRES_DB: ${FINANCE_DB}
      POSTGRES_USER: ${FINANCE_DB_USER}
      POSTGRES_PASSWORD: ${FINANCE_DB_PASSWORD}
      POSTGRES_HOST: finances-db
      POSTGRES_PORT: 5432
      BUILD_ENV: local
      DJANGO_SETTINGS_MODULE: config.settings.local
      DEBUG: 'true'
      USE_DOCKER: 'yes'
    command: /start
    depends_on:
      finances-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - poupe-ai-network

  # Reports Service
  reports-service:
    build:
      context: ../report_service/poupeai-report-service
      dockerfile: Dockerfile
    container_name: reports-service
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    networks:
      - poupe-ai-network
  
  # Grafana Loki
  loki:
    image: grafana/loki:latest
    container_name: loki
    command:
      - -config.file=/etc/loki/config.yaml
      - -config.expand-env=true
    volumes:
      - ./logging/loki/loki-config.yaml:/etc/loki/config.yaml:ro
      - loki_data:/loki
    restart: unless-stopped
    networks:
      - poupe-ai-logging-network

  # Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    command: -config.file=/etc/promtail/config.yml -config.expand-env=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logging/promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
      - promtail_positions:/var/lib/promtail
      - promtail_wal:/var/lib/promtail/wal
    restart: unless-stopped
    depends_on:
      - loki
    networks:
      - poupe-ai-network
      - poupe-ai-logging-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_LOGINS_OAUTH_AUTO_LOGIN_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
    volumes:
      - ./logging/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - loki
    networks:
      - poupe-ai-logging-network
  
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-poupeai
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    networks:
      - poupe-ai-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-poupeai
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - poupe-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Notification Service
  notification-service:
    build:
      context: ../notification_service/poupeai-notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - poupe-ai-network
    environment:
      - DEBUG=True
      - PYTHONUNBUFFERED=1
      # RabbitMQ Connection
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_MAX_RETRIES=3
      # RabbitMQ Topology
      - RABBITMQ_EXCHANGE_MAIN=notification_exchange
      - RABBITMQ_QUEUE_MAIN=notification_events
      - RABBITMQ_ROUTING_KEY=notification.event
      - RABBITMQ_EXCHANGE_RETRY=notification_exchange.retry
      - RABBITMQ_QUEUE_RETRY=notification_events.retry
      - RABBITMQ_EXCHANGE_DLQ=notification_exchange.dlq
      - RABBITMQ_QUEUE_DLQ=notification_events.dlq
      - RABBITMQ_RETRY_DELAY_MS=10000
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # Email
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_FROM=${MAIL_FROM}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_SERVER=${MAIL_SERVER}

volumes:
  keycloak_data:
  finances_data:
  loki_data:
  promtail_positions:
  promtail_wal:
  grafana_data:
  rabbitmq_data:
  redis_data:

networks:
  poupe-ai-network:
    driver: bridge

  poupe-ai-logging-network:
    driver: bridge